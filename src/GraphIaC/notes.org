"""
- Setup IAM - create permis dynamically
- create node
- create edge

- tests
- examples

custom model - add to model map

fndtn_web_deploy

model_validate(co_orm)

Current tools are good at creating the nodes but not the edges. They are missing half the picture.

import from aws

plan step

ability to import 
"""
#dasraetsel.org

#Hosted zone: dasraetsel.org
#https://networkx.org/documentation/stable/tutorial.html
#https://www.activestate.com/blog/graph-theory-using-python-introduction-and-implementation/
#cert.arn = "arn:aws:acm:us-east-1:590184133959:certificate/e25aeb27-0b75-4ff2-87d2-9e2161152171"
#ARN: arn:aws:acm:us-east-1:590184133959:certificate/e25aeb27-0b75-4ff2-87d2-9e2161152171


"""
#G = nx.Graph()
G =  nx.DiGraph()

G.add_node(hz.g_id, data=hz)

G.add_node(cert.g_id, data=cert)

#G.add_edge(hz.g_id, cert.g_id)

cert_hz_edge = CertificateHostedZoneEdge(hz_g_id=hz.g_id,cert_g_id=cert.g_id,changes=[])
cert_hz_edge.changes = [{'Changes': [{'Action': 'UPSERT', 'ResourceRecordSet': {'Name': '_81cc1cc6f4770a60a8e9b0fe79ff233b.dasraetsel.org.', 'Type': 'CNAME', 'TTL': 300, 'ResourceRecords': [{'Value': '_23a6a7b4028b5956656e31bec4738606.djqtsrsxkq.acm-validations.aws.'}]}}]}, {'Changes': [{'Action': 'UPSERT', 'ResourceRecordSet': {'Name': '_c816485cb053f481ab9e112942c67ca2.www.dasraetsel.org.', 'Type': 'CNAME', 'TTL': 300, 'ResourceRecords': [{'Value': '_2c0db9962f155c009152ac48c5f3d4fc.djqtsrsxkq.acm-validations.aws.'}]}}]}]

G.add_edge( cert.g_id,hz.g_id)

#add_edge(cert.g_id,hz.g_id), 0, cert_hz_edge)
ns = G.neighbors(cert.g_id)

for e in ns:
    print(e)
    print(G.nodes[e])
"""

#G.nodes[hz.g_id]

#G.nodes[hz.g_id]['data']

#hz.__class__.__name__


#G.edges[hz.g_id, cert.g_id]


#G.edges[hz.g_id, cert.g_id]['data'] = {}


#export_graph(G,"dasraetsel")



Why I hate frameworks in general.

The try to abstract things from you, so you don't learn anything about the system you are using.

In some cases, if it never breaks and it just works great.

The problem comes when it breaks or gets in the way.

When things are two abstracted and hidden and it stops working or doesn't fit your workflow, then you starting at zero and have to learn how this things works at a deep level.

Often they work great for small examples. ORM's are great for boiler plate queries, but more involved then it is just getting in the way, or have terribile performance.

Or you now just stuck and having to work and hack around the system, or worse rip and replace the whole thing because it is a monolith and it is all or nothing.

Pipes showing, drill a whole through the while and use or not use any parts that make sense to you.




https://mermaid.js.org/intro/
